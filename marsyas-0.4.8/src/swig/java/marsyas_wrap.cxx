/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <marsyas/MarSystem.h>

using namespace Marsyas;



#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <marsyas/common.h>

using namespace Marsyas;


SWIGINTERN MarControlPtr const &std_map_Sl_std_string_Sc_MarControlPtr_Sg__get(std::map<std::string,MarControlPtr > *self,std::string const &key){
                std::map<std::string,MarControlPtr >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_MarControlPtr_Sg__set(std::map<std::string,MarControlPtr > *self,std::string const &key,MarControlPtr const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_MarControlPtr_Sg__del(std::map<std::string,MarControlPtr > *self,std::string const &key){
                std::map<std::string,MarControlPtr >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_MarControlPtr_Sg__has_key(std::map<std::string,MarControlPtr > *self,std::string const &key){
                std::map<std::string,MarControlPtr >::iterator i = self->find(key);
                return i != self->end();
            }

#include <marsyas/MarSystemManager.h>

using namespace Marsyas;



#include <vector>
#include <stdexcept>

SWIGINTERN std::vector<std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector<std::string > *self,int i,std::vector<std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <marsyas/MarControl.h>

using namespace Marsyas;


SWIGINTERN MarControlPtr MarControlPtr_from_natural(mrs_natural x){ return MarControlPtr(x); }
SWIGINTERN MarControlPtr MarControlPtr_from_real(mrs_real x){ return MarControlPtr(x); }
SWIGINTERN MarControlPtr MarControlPtr_from_bool(mrs_bool x){ return MarControlPtr(x); }
SWIGINTERN MarControlPtr MarControlPtr_from_string(mrs_string x){ return MarControlPtr(x); }
SWIGINTERN mrs_string MarControlPtr_getType(MarControlPtr *self){ return (*self)->getType(); }
SWIGINTERN mrs_string MarControlPtr_getName(MarControlPtr *self){ return (*self)->getName(); }
SWIGINTERN mrs_bool MarControlPtr_setValue_natural(MarControlPtr *self,mrs_natural x){ return (*self)->setValue(x); }
SWIGINTERN mrs_bool MarControlPtr_setValue_real(MarControlPtr *self,mrs_real x){ return (*self)->setValue(x); }
SWIGINTERN mrs_bool MarControlPtr_setValue_bool(MarControlPtr *self,mrs_bool x){ return (*self)->setValue(x); }
SWIGINTERN mrs_bool MarControlPtr_setValue_string(MarControlPtr *self,mrs_string x){ return (*self)->setValue(x); }
SWIGINTERN mrs_natural MarControlPtr_to_natural(MarControlPtr *self){ return (*self)->to<mrs_natural>(); }
SWIGINTERN mrs_real MarControlPtr_to_real(MarControlPtr *self){ return (*self)->to<mrs_real>(); }
SWIGINTERN mrs_string MarControlPtr_to_string(MarControlPtr *self){ return (*self)->to<mrs_string>(); }
SWIGINTERN mrs_bool MarControlPtr_to_bool(MarControlPtr *self){ return (*self)->to<mrs_bool>(); }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1Map_1String_1MarControlPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map<std::string,MarControlPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map<std::string,MarControlPtr > *)new std::map<std::string,MarControlPtr >();
  *(std::map<std::string,MarControlPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1Map_1String_1MarControlPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map<std::string,MarControlPtr > *arg1 = 0 ;
  std::map<std::string,MarControlPtr > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map<std::string,MarControlPtr > const & reference is null");
    return 0;
  } 
  result = (std::map<std::string,MarControlPtr > *)new std::map<std::string,MarControlPtr >((std::map<std::string,MarControlPtr > const &)*arg1);
  *(std::map<std::string,MarControlPtr > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  result = (unsigned int)((std::map<std::string,MarControlPtr > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  result = (bool)((std::map<std::string,MarControlPtr > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  std::string *arg2 = 0 ;
  MarControlPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    {
      MarControlPtr const &_result_ref = std_map_Sl_std_string_Sc_MarControlPtr_Sg__get(arg1,(std::string const &)*arg2);
      result = (MarControlPtr *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(MarControlPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  std::string *arg2 = 0 ;
  MarControlPtr *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(MarControlPtr **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MarControlPtr const & reference is null");
    return ;
  } 
  std_map_Sl_std_string_Sc_MarControlPtr_Sg__set(arg1,(std::string const &)*arg2,(MarControlPtr const &)*arg3);
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1del(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    std_map_Sl_std_string_Sc_MarControlPtr_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_Map_1String_1MarControlPtr_1has_1key(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_MarControlPtr_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_delete_1Map_1String_1MarControlPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map<std::string,MarControlPtr > *arg1 = (std::map<std::string,MarControlPtr > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map<std::string,MarControlPtr > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1tick(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  (arg1)->tick();
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  (arg1)->update();
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1addMarSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  MarSystem *arg2 = (MarSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MarSystem **)&jarg1; 
  arg2 = *(MarSystem **)&jarg2; 
  (arg1)->addMarSystem(arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  result = (arg1)->getType();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  result = (arg1)->getName();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1getPrefix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  result = (arg1)->getPrefix();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1setControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string arg2 ;
  MarControlPtr arg3 ;
  MarControlPtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MarSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(MarControlPtr **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MarControlPtr");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setControl(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1updControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string arg2 ;
  MarControlPtr arg3 ;
  MarControlPtr *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(MarSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  argp3 = *(MarControlPtr **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null MarControlPtr");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->updControl(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1getControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string arg2 ;
  MarControlPtr result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->getControl(arg2);
  *(MarControlPtr **)&jresult = new MarControlPtr((MarControlPtr &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1hasControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->hasControl(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1linkControl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  (arg1)->linkControl(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystem_1getControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MarSystem *arg1 = (MarSystem *) 0 ;
  std::map<std::string,MarControlPtr > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystem **)&jarg1; 
  result = (arg1)->getControls();
  *(std::map<std::string,MarControlPtr > **)&jresult = new std::map<std::string,MarControlPtr >((std::map<std::string,MarControlPtr > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_delete_1MarSystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MarSystem *arg1 = (MarSystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MarSystem **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1Vector_1String_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<std::string > *)new std::vector<std::string >();
  *(std::vector<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1Vector_1String_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::string >::size_type arg1 ;
  std::vector<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<std::string >::size_type)jarg1; 
  result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
  *(std::vector<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  result = ((std::vector<std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  result = ((std::vector<std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  arg2 = (std::vector<std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  result = (bool)((std::vector<std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector<std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  int arg2 ;
  std::vector<std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<std::string >::const_reference _result_ref = std_vector_Sl_std_string_Sg__get(arg1,arg2);
      result = (std::vector<std::string >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_Vector_1String_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  int arg2 ;
  std::vector<std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_delete_1Vector_1String(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1MarSystemManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MarSystemManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MarSystemManager *)new MarSystemManager();
  *(MarSystemManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystemManager_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  MarSystemManager *arg1 = (MarSystemManager *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  MarSystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystemManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (MarSystem *)(arg1)->create(arg2,arg3);
  *(MarSystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarSystemManager_1registeredPrototypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MarSystemManager *arg1 = (MarSystemManager *) 0 ;
  std::vector<std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarSystemManager **)&jarg1; 
  result = (arg1)->registeredPrototypes();
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_delete_1MarSystemManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MarSystemManager *arg1 = (MarSystemManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MarSystemManager **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1MarControlPtr_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MarControlPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MarControlPtr *)new MarControlPtr();
  *(MarControlPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_new_1MarControlPtr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  MarControlPtr *arg1 = 0 ;
  MarControlPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MarControlPtr const & reference is null");
    return 0;
  } 
  result = (MarControlPtr *)new MarControlPtr((MarControlPtr const &)*arg1);
  *(MarControlPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_edu_uvic_marsyas_marsyasJNI_delete_1MarControlPtr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MarControlPtr **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1isInvalid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = (bool)((MarControlPtr const *)arg1)->isInvalid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1from_1natural(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  mrs_natural arg1 ;
  MarControlPtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mrs_natural)jarg1; 
  result = MarControlPtr_from_natural(arg1);
  *(MarControlPtr **)&jresult = new MarControlPtr((MarControlPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1from_1real(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  mrs_real arg1 ;
  MarControlPtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (mrs_real)jarg1; 
  result = MarControlPtr_from_real(arg1);
  *(MarControlPtr **)&jresult = new MarControlPtr((MarControlPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1from_1bool(JNIEnv *jenv, jclass jcls, jboolean jarg1) {
  jlong jresult = 0 ;
  mrs_bool arg1 ;
  MarControlPtr result;
  
  (void)jenv;
  (void)jcls;
  arg1 = jarg1 ? true : false; 
  result = MarControlPtr_from_bool(arg1);
  *(MarControlPtr **)&jresult = new MarControlPtr((MarControlPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1from_1string(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  mrs_string arg1 ;
  MarControlPtr result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = MarControlPtr_from_string(arg1);
  *(MarControlPtr **)&jresult = new MarControlPtr((MarControlPtr &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1getType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = MarControlPtr_getType(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = MarControlPtr_getName(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1setValue_1natural(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_natural arg2 ;
  mrs_bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  arg2 = (mrs_natural)jarg2; 
  result = MarControlPtr_setValue_natural(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1setValue_1real(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_real arg2 ;
  mrs_bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  arg2 = (mrs_real)jarg2; 
  result = MarControlPtr_setValue_real(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1setValue_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_bool arg2 ;
  mrs_bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = MarControlPtr_setValue_bool(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1setValue_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_string arg2 ;
  mrs_bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = MarControlPtr_setValue_string(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1to_1natural(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_natural result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = MarControlPtr_to_natural(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1to_1real(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = MarControlPtr_to_real(arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1to_1string(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = MarControlPtr_to_string(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_edu_uvic_marsyas_marsyasJNI_MarControlPtr_1to_1bool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MarControlPtr *arg1 = (MarControlPtr *) 0 ;
  mrs_bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MarControlPtr **)&jarg1; 
  result = MarControlPtr_to_bool(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

