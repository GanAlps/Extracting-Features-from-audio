\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@setfilename marsyas-cookbook.info
@settitle Marsyas Cookbook
@comment %**end of header
     

@dircategory Audio 
@direntry 
* Marsyas: (marsyas). Marsyas Analysis Retrieval and Synthesis for
Audio Signals 
@end direntry

@copying 
Copyright 1998-2006 George Tzanetakis 

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled "Copying" and "GNU General Public License"
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end copying 
     
@titlepage
@title Marsyas Cookbook
@subtitle For version 0.2 
@subtitle @b{M}usic @b{A}nalysis @b{R}etrieval and @b{SY}nthesis for @b{A}udio @b{S}ignals 
@author Steven Ness and George Tzanetakis
     
@c  The following two commands
@c  start the copyright page.
@page
@vskip 0pt plus 1filll


@end titlepage
@contents
     
@c So the toc is printed in the right place.
      
@ifnottex
@node Top
@top Marsyas Cookbook
@end ifnottex


@menu
* Playing a sound file:: Playing a sound file
* Read in and write out a soundfile:: Read in and write out a soundfile
* Playing multiple sound files at once:: Playing multiple sound files at once
* Look at your network:: Look at your network
* The Index::                   The Index.
@end menu


@node Playing a sound file
@chapter Playing a sound file

@subheading Problem:    

You want to play an audio file using Marsyas

@subheading Solution

Put a SoundFileSoure and a AudioSink inside of a Series object.

@subheading Discussion

To do this, you just need to put a SoundFileSoure and a AudioSink
inside of a Series object.

You then will set the filename of the SoundFileSource with:

@example
   playbacknet->updctrl("SoundFileSource/src/mrs_string/filename",inAudioFileName);
@end example

And initialize the audio:

@example
   playbacknet->updctrl("AudioSink/dest/mrs_bool/initAudio", true);
@end example

You then just tick the network until all the frames have finished
playing:

@example
while (playbacknet->getctrl("SoundFileSource/src/mrs_bool/hasData")->isTrue())	@{
  playbacknet->tick();
@}
@end example

The network will look like:

@example
- Series
   - SoundFileSource
   - AudioSink
@end example

The code will look like:

@example
MarSystem* playbacknet = mng.create("Series", "playbacknet");
playbacknet->addMarSystem(mng.create("SoundFileSource", "src"));
playbacknet->addMarSystem(mng.create("Gain", "gt"));
playbacknet->addMarSystem(mng.create("AudioSink", "dest"));

// Set the SoundFileName
playbacknet->updctrl("SoundFileSource/src/mrs_string/filename",inAudioFileName);

// Turn on the audio output
playbacknet->updctrl("AudioSink/dest/mrs_bool/initAudio", true);

while (playbacknet->getctrl("SoundFileSource/src/mrs_bool/hasData")->isTrue())	@{
   playbacknet->tick();
@}
@end example

@node Read in and write out a soundfile
@chapter Read in and write out a soundfile

@subheading Problem

You want to read in a sound file and write out the same sound file.

@subheading Solution

Use a SoundFileSource to read in the audio file, and put it into a 
Series, then add a SoundFileSink to the Series.

@subheading Discussion

This recipe is similar to the one given above, where you want to read 
in an audiofile and play it on your speakers, but in this case you want to output
it to another audio file.  This is the basic building block of a number
of different audio processing applications, you would just put your
processing code in between the SoundFileSource and SoundFileSink:

@example
  MarSystemManager mng;

  // create playback network with source-gain-dest
  MarSystem* playbacknet = mng.create("Series", "playbacknet");
  playbacknet->addMarSystem(mng.create("SoundFileSource", "src"));
  playbacknet->addMarSystem(mng.create("SoundFileSink", "dest"));

  playbacknet->updctrl("SoundFileSource/src/mrs_string/filename",inAudioFileName);
  playbacknet->updctrl("SoundFileSink/dest/mrs_string/filename",outAudioFileName);

  while (playbacknet->getctrl("SoundFileSource/src/mrs_bool/hasData")->isTrue()) @{
  	playbacknet->tick();
  @}
@end example



@node Playing multiple sound files at once
@chapter Playing multiple sound files at once

@subheading Problem

You want to output multiple sound files to the audio device on your
system all at the same time.

@subheading Solution

Make a network with SoundFileSources and put all these
SoundFileSources inside a Fanout.

@subheading Discussion

   To do this, you need a network with SoundFileSources for each of
   the input sources.  You then put all these SoundFileSources inside
   a Fanout, this will play all the sound files simultaneously.

   The output of the Fanout is a stacked array of all the data from
   the audio files, you need to combine these together using a Sum
   object.

   Finally, you output all of them to an AudioSink

   The network will look like:

@example
- Series
  - Fanout
    - SoundFileSource
    - SoundFileSource
    - SoundFileSource
  - Sum
  - AudioSink
@end example

   The code will look like:

@example
MarSystemManager mng;
MarSystem* playbacknet = mng.create("Series", "playbacknet");
MarSystem* fanout = mng.create("Fanout", "fanout");

// Create the SoundFileSources
fanout->addMarSystem(mng.create("SoundFileSource", "src1"));
fanout->addMarSystem(mng.create("SoundFileSource", "src2"));
fanout->addMarSystem(mng.create("SoundFileSource", "src3"));

// Assign filenames to the SoundFileSources
fanout->updctrl("SoundFileSource/src1/mrs_string/filename",file1);
fanout->updctrl("SoundFileSource/src2/mrs_string/filename",file2);
fanout->updctrl("SoundFileSource/src3/mrs_string/filename",file3);

// Add the fanout to the main network
playbacknet->addMarSystem(fanout);

// Sum up all of the fanouts
playbacknet->addMarSystem(mng.create("Sum", "sum"));

// Create the output file which is a SoundFileSink
playbacknet->addMarSystem(mng.create("AudioSink", "dest"));
playbacknet->updctrl("AudioSink/dest/mrs_bool/initAudio", true);

while (!done) @{
  playbacknet->tick();
@}
@end example


@node Look at your network
@chapter Look at your network

@subheading Problem

You are having trouble figuring out what is going wrong in your network
and you want to look at your network to find out what is going wrong

@subheading Solution

Use the stream redirection operator with cout

@subheading Discussion

It's really simple to output your whole network, you just go:

@example
MarSystemManager mng;
MarSystem* net = mng.create("Series", "net");

cout << *net;
@end example

All of the components of the network, and the state of all their controls
will be written to the standard output.  

If the format is too hard to understand, try using put_html:

@example
net->put_html(cout);
@end example

Which has some nifty javascript to hide and show different parts of your
network.









@node The Index
@unnumbered The Index 

@printindex cp 



@bye
