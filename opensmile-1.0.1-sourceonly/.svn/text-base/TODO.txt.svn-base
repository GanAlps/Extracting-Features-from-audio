openSMILE 'todo-list':
======================

** remove old for each field processing code / mode -> it is too confusing and not well maintained on higher levels...!
->! check if it is not used for mono signals
-> instead add, a "splitter" that can write to multiple levels?

** add 


.......

** increase re-usability:

* NAMESPACE opensmile::
* Move functions in smileCommon.hpp to a smileUtil.cpp which contains static classes/namespaces (e.g. windowing functions)

* configManager: print/dump config support, to print full current config

--

* zcr (as frame)  OR: all functionals as vectorProcessor!! :=)

(ok?) flux/rollOff as functionals

* merge and sync cFunctionals and cFunctionalsVecToVec

* dataSink => vectorSink

* TEST dead end connection behaviour (tonespecChris.conf with tonespecDelta enabled)

 ** SMILE LIB: signal processing functions, min, max (of vectors, matricies), fft, acf, amdf, etc.


 (?) change tonefilt to a winToVecProcessor
 [* improve tonefilter algorithm wrt. speed (use cos/sin tables) ]
 
 * MORE DOCUMENTATION (USER & DEVELOPER)

     * GUI for level connection config, config file editor!

 * FILTER INFS AND NANS in dataReader and print detailed warnings if INFS and NANS were found!! (this is only done partially in some Sink components)

 * variable frameSize "winToVec"


 * add more debug and informative output for components (configurable via config file) (e.g. as for tonespec)
  
 * config file : support linking to a) variables, b) instances, and c) sub-types/instances

partially done:
===============

(part.)(ok) check level connections in detail, i.e. if we cannot finalise due to missing read level... bring an error 
 **> TODO: display a tree of level connections

(ok?) auto buffersize ('upstream') as far as possible -> blocksizeR/W
(ok?) check if use of tmetaReplace is legitimate!!
ok? TEST padEnd, EOI and frameSize=0 => whole input
ok? test Fconf code in vectorProcessor !

(OK) MULTI-THREADING:
   (ok) in tickLoop() (component manager): tickLoop for each thread
   (ok) central memory where nRun for each thread is written and a timeout is checked when no thread was successfully run for a certain time, or better, each thread has performed two all fail epochs
   (ok) intelligent management: after one all fail epoch, sleep and give control to other threads
   (ok) config option for each instance: thread=X  (which thread to run in)
   (ok) config option nThreads=XX
   (ok) locking code in dataMemoryLevel using pthread mutexes:
        lock while writing (setFrame)
      do not allow, reading, querying etc. while writing
      also check: concurrency on read counter increase!
   
   CHECK: where do we use memory in dataMemory in the components !? better always memcpy into new vector/matrix object!


DONE (=OK):
===========

(OK) PRINT ERROR, if level buffer is too small (i.e. if we read/write MORE THAN or EQUAL TO samples)
  ==  buffersize checks, errors warnings, if buffers are too small 

(OK) debug/error/warning outputs better (include instance name in messages generated by components!)
(DONE) get rid of #define class => proper DLLEXPORT in front of every ex/im-ported function

(ok) TEST libsvmLive
(ok) TEST spectral
(ok) functionals: peaks and segments
(ok) pitch
(ok) hnr
(ok) spectral

(ok) proper fmeta concat in cDataReader 
(OK) level Info debug output

(OK) print list of available components
(OK) Wave Source start/stop
(OK) add EOI flag/state to cSmileComponent to indicate end of input processing (i.e. last frames, etc.)
(OK) arffSink targets
 
(OK) check HTK compatibility (MFCC) when lofreq!=0 && hifreq!=8000
(OK) logE htk compatible

(OK) linking to commandline options

=================
components TODO:
================

* CENS
* Formants
* VoiceQuality
* CombFilters
* StaticNoise
* data merger (adder, ...)
* (selector in data reader ?)
* temporal vector concat ("context windows")
* monitor output (GUI! linux, gtk, etc.)


(part.) nnlPlugin


(ok) PortAudio support
(ok?) dataSelector : select elements from vector based on indexList/nameList/groups

(OK) liveInput (portaudio, alsa)
(OK) liveOutput 

(OK) Pitch
(OK) Chroma


FeatureFile READERS  -> 
(OK) Arff
(OK) WaveOutput
(OK) CSV
(OK) SemaineAPI output

==============
external TODO:
==============

 * create scripts to generate config files for common tasks:
    - MFCC/LPC/PLP/etc. feature extraction for ASR
    - Statistical Functionals for Emotion/Affect recognition
    - MIR features (low-level chroma, etc.)
    - MIR features (high level, tempo, etc.)


